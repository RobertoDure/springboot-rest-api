openapi: 3.0.1
info:
  title: Spring Boot REST API
  description: Sample Spring Boot API
  contact:
    name: Roberto Dur√©
    email: robertodure1990@gmail.com
  license:
    name: Apache License Version 2.0
    url: https://www.apache.org/license/LICENSE-2.0
  version: "1.0"
servers:
  - url: http://localhost:8080/
tags:
  - name: Teacher Endpoint
    description: A REST API for Teacher
  - name: Student Endpoint
    description: A REST API for students
  - name: Get Token
    description: Bearer token
paths:
  /login:
    post:
      tags:
        - Get Token
      summary: Authenticate user and obtain a token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login, returns a token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error
  /api/v1/student:
    get:
      tags:
        - Student Endpoint
      summary: listAll
      operationId: listAllUsingGET
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
    put:
      tags:
        - Student Endpoint
      summary: update
      operationId: updateUsingPUT
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      requestBody:
        description: student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "201":
          description: Created
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
      x-codegen-request-body-name: student
    post:
      tags:
        - Student Endpoint
      summary: save
      operationId: saveUsingPOST
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      requestBody:
        description: student
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "201":
          description: Created
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
      x-codegen-request-body-name: student
  /api/v1/student/id/{id}:
    get:
      tags:
        - Student Endpoint
      summary: getStudentById
      operationId: getStudentByIdUsingGET
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
  /api/v1/student/name/{name}:
    get:
      tags:
        - Student Endpoint
      summary: findStudentsByName
      operationId: findStudentsByNameUsingGET
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
  /api/v1/student/{id}:
    delete:
      tags:
        - Student Endpoint
      summary: delete
      operationId: deleteUsingDELETE
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "204":
          description: No Content
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
  /api/v1/teacher:
    get:
      tags:
        - teacher-endpoint
      summary: Return a list with all teachers
      operationId: listAllUsingGET_1
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
    put:
      tags:
        - teacher-endpoint
      summary: Update a teacher
      operationId: updateUsingPUT_1
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      requestBody:
        description: teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Teacher'
        "201":
          description: Created
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
      x-codegen-request-body-name: teacher
    post:
      tags:
        - teacher-endpoint
      summary: Save a teacher
      operationId: saveUsingPOST_1
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
      requestBody:
        description: teacher
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Teacher'
        "201":
          description: Created
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
      x-codegen-request-body-name: teacher
  /api/v1/teacher/id/{id}:
    get:
      tags:
        - teacher-endpoint
      summary: Return a teacher by ID
      operationId: getTeacherByIdUsingGET
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Teacher'
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
  /api/v1/teacher/name/{name}:
    get:
      tags:
        - teacher-endpoint
      summary: Return a teacher by Name
      operationId: getTeacherByNameUsingGET
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Teacher'
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
        "404":
          description: Not Found
          content: { }
  /api/v1/teacher/{id}:
    delete:
      tags:
        - teacher-endpoint
      summary: Delete a teacher
      operationId: deleteUsingDELETE_1
      parameters:
        - name: Authorization
          in: header
          description: Bearer token
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        "204":
          description: No Content
          content: { }
        "401":
          description: Unauthorized
          content: { }
        "403":
          description: Forbidden
          content: { }
components:
  schemas:
    Grade:
      type: object
      properties:
        grade:
          type: number
          format: float
        gradeComment:
          type: string
        gradeDate:
          type: string
          example: MM-dd-yyyy
        id:
          type: integer
          format: int64
        lectureId:
          type: integer
          format: int64
        teacherId:
          type: integer
          format: int64
    Lecture:
      type: object
      properties:
        description:
          type: string
        endDate:
          type: string
          example: MM-dd-yyyy
        id:
          type: integer
          format: int64
        lectureName:
          type: string
        startDate:
          type: string
          example: MM-dd-yyyy
    Student:
      type: object
      properties:
        address:
          type: string
        dateOfBirth:
          type: string
          example: MM-dd-yyyy
        email:
          type: string
        gender:
          type: string
        grades:
          type: array
          items:
            $ref: '#/components/schemas/Grade'
        guardianContact:
          type: string
        guardianName:
          type: string
        id:
          type: integer
          format: int64
        idClassroom:
          type: integer
          format: int32
        idTeacher:
          type: integer
          format: int64
        lectures:
          type: array
          items:
            $ref: '#/components/schemas/Lecture'
        name:
          type: string
        nationality:
          type: string
    Teacher:
      type: object
      properties:
        address:
          type: string
        dateOfBirth:
          type: string
          example: MM-dd-yyyy
        email:
          type: string
        gender:
          type: string
        id:
          type: integer
          format: int64
        idClassroom:
          type: integer
          format: int32
        name:
          type: string
        nationality:
          type: string







